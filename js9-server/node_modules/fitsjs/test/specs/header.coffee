
window.FITS = astro.FITS

describe "FITS Header", ->

  it 'can parse a FITS header describing an image and ASCII table', ->
    ready = false
    
    path = 'data/m101.fits'
    fits = new astro.FITS(path, (fits) ->
      ready = true
    )
    
    waitsFor ->
      return ready
    
    runs ->
      hdr1 = fits.getHeader(0)
      hdr2 = fits.getHeader(1)
      
      expect(hdr1.isPrimary()).toBeTruthy()
      expect(hdr1.isExtension()).toBeFalsy()
      
      expect(hdr1.get('SIMPLE')).toBeTruthy()
      expect(hdr1.get('BITPIX')).toEqual(16)
      expect(hdr1.get('NAXIS')).toEqual(2)
      expect(hdr1.get('NAXIS1')).toEqual(891)
      expect(hdr1.get('NAXIS2')).toEqual(893)
      expect(hdr1.get('EXTEND')).toBeTruthy()
      expect(hdr1.get('DATE')).toBe('2011-08-26')
      expect(hdr1.get('ORIGIN')).toBe('STScI/MAST')
      expect(hdr1.get('SURVEY')).toBe('POSSII-F')
      expect(hdr1.get('REGION')).toBe('XP174')
      expect(hdr1.get('PLATEID')).toBe('A0X2')
      expect(hdr1.get('SCANNUM')).toBe('01')
      expect(hdr1.get('DSCNDNUM')).toBe('00')
      expect(hdr1.get('TELESCID')).toEqual(3)
      expect(hdr1.get('BANDPASS')).toEqual(35)
      expect(hdr1.get('COPYRGHT')).toBe('Caltech/Palomar')
      expect(hdr1.get('SITELAT')).toEqual(33.356)
      expect(hdr1.get('SITELONG')).toEqual(116.863)
      expect(hdr1.get('TELESCOP')).toBe('Oschin Schmidt - D')
      expect(hdr1.get('INSTRUME')).toBe('Photographic Plate')
      expect(hdr1.get('EMULSION')).toBe('IIIaF')
      expect(hdr1.get('FILTER')).toBe('RG610')
      expect(hdr1.get('PLTSCALE')).toEqual(67.2)
      expect(hdr1.get('PLTSIZEX')).toEqual(355.0)
      expect(hdr1.get('PLTSIZEY')).toEqual(355.0)
      expect(hdr1.get('PLATERA')).toEqual(206.72736)
      expect(hdr1.get('PLATEDEC')).toEqual(54.815161)
      expect(hdr1.get('PLTLABEL')).toBe('SF05135')
      expect(hdr1.get('DATE-OBS')).toBe('1993-04-25T06:60:00')
      expect(hdr1.get('EXPOSURE')).toEqual(85.0)
      expect(hdr1.get('PLTGRADE')).toBe('B')
      expect(hdr1.get('OBSHA')).toEqual(0.75)
      expect(hdr1.get('OBSZD')).toEqual(22.8036)
      expect(hdr1.get('AIRMASS')).toEqual(1.08459)
      expect(hdr1.get('REFBETA')).toEqual(61.776148)
      expect(hdr1.get('REFBETAP')).toEqual(-0.082)
      expect(hdr1.get('REFK1')).toEqual(-2020.9578)
      expect(hdr1.get('REFK2')).toEqual(-81071.889)
      expect(hdr1.get('CNPIX1')).toEqual(2608)
      expect(hdr1.get('CNPIX2')).toEqual(9632)
      expect(hdr1.get('XPIXELS')).toEqual(23040)
      expect(hdr1.get('YPIXELS')).toEqual(23040)
      expect(hdr1.get('XPIXELSZ')).toEqual(15.0295)
      expect(hdr1.get('YPIXELSZ')).toEqual(15.0)
      expect(hdr1.get('PPO1')).toEqual(-3069417.0)
      expect(hdr1.get('PPO2')).toEqual(0.0)
      expect(hdr1.get('PPO3')).toEqual(177500.0)
      expect(hdr1.get('PPO4')).toEqual(0.0)
      expect(hdr1.get('PPO5')).toEqual(3069417.0)
      expect(hdr1.get('PPO6')).toEqual(177500.0)
      expect(hdr1.get('PLTRAH')).toEqual(13)
      expect(hdr1.get('PLTRAM')).toEqual(46)
      expect(hdr1.get('PLTRAS')).toEqual(54.4)
      expect(hdr1.get('PLTDECSN')).toBe('+')
      expect(hdr1.get('PLTDECD')).toEqual(54)
      expect(hdr1.get('PLTDECM')).toEqual(48)
      expect(hdr1.get('PLTDECS')).toEqual(55.6)
      expect(hdr1.get('EQUINOX')).toEqual(2000.0)
      expect(hdr1.get('AMDX1')).toEqual(67.1289627512)
      expect(hdr1.get('AMDX2')).toEqual(-0.144391938541)
      expect(hdr1.get('AMDX3')).toEqual(-292.010821953)
      expect(hdr1.get('AMDX4')).toEqual(-2.36321927229e-05)
      expect(hdr1.get('AMDX5')).toEqual(1.5032653996e-05)
      expect(hdr1.get('AMDX6')).toEqual(-2.7471246116e-06)
      expect(hdr1.get('AMDX7')).toEqual(0.0)
      expect(hdr1.get('AMDX8')).toEqual(2.30446279015e-06)
      expect(hdr1.get('AMDX9')).toEqual(-4.26338207029e-08)
      expect(hdr1.get('AMDX10')).toEqual(2.39427475192e-06)
      expect(hdr1.get('AMDX11')).toEqual(-7.94020590268e-08)
      expect(hdr1.get('AMDX12')).toEqual(0.0)
      expect(hdr1.get('AMDX13')).toEqual(0.0)
      expect(hdr1.get('AMDX14')).toEqual(0.0)
      expect(hdr1.get('AMDX15')).toEqual(0.0)
      expect(hdr1.get('AMDX16')).toEqual(0.0)
      expect(hdr1.get('AMDX17')).toEqual(0.0)
      expect(hdr1.get('AMDX18')).toEqual(0.0)
      expect(hdr1.get('AMDX19')).toEqual(0.0)
      expect(hdr1.get('AMDX20')).toEqual(0.0)
      expect(hdr1.get('AMDY1')).toEqual(67.1325924466)
      expect(hdr1.get('AMDY2')).toEqual(0.144310904032)
      expect(hdr1.get('AMDY3')).toEqual(313.822109662)
      expect(hdr1.get('AMDY4')).toEqual(2.38233596961e-05)
      expect(hdr1.get('AMDY5')).toEqual(-1.79207383308e-05)
      expect(hdr1.get('AMDY6')).toEqual(1.97333478155e-05)
      expect(hdr1.get('AMDY7')).toEqual(0.0)
      expect(hdr1.get('AMDY8')).toEqual(2.20441222124e-06)
      expect(hdr1.get('AMDY9')).toEqual(1.14031786424e-09)
      expect(hdr1.get('AMDY10')).toEqual(2.41348749404e-06)
      expect(hdr1.get('AMDY11')).toEqual(-1.7842569887e-08)
      expect(hdr1.get('AMDY12')).toEqual(0.0)
      expect(hdr1.get('AMDY13')).toEqual(0.0)
      expect(hdr1.get('AMDY14')).toEqual(0.0)
      expect(hdr1.get('AMDY15')).toEqual(0.0)
      expect(hdr1.get('AMDY16')).toEqual(0.0)
      expect(hdr1.get('AMDY17')).toEqual(0.0)
      expect(hdr1.get('AMDY18')).toEqual(0.0)
      expect(hdr1.get('AMDY19')).toEqual(0.0)
      expect(hdr1.get('AMDY20')).toEqual(0.0)
      expect(hdr1.get('AMDREX1')).toEqual(67.1265396819)
      expect(hdr1.get('AMDREX2')).toEqual(-0.145443178281)
      expect(hdr1.get('AMDREX3')).toEqual(-291.97509882)
      expect(hdr1.get('AMDREX4')).toEqual(2.80326423325e-06)
      expect(hdr1.get('AMDREX5')).toEqual(-4.89076221034e-08)
      expect(hdr1.get('AMDREX6')).toEqual(5.1338363257e-06)
      expect(hdr1.get('AMDREX7')).toEqual(0.0)
      expect(hdr1.get('AMDREX8')).toEqual(0.0)
      expect(hdr1.get('AMDREX9')).toEqual(0.0)
      expect(hdr1.get('AMDREX10')).toEqual(0.0)
      expect(hdr1.get('AMDREX11')).toEqual(0.0)
      expect(hdr1.get('AMDREX12')).toEqual(0.0)
      expect(hdr1.get('AMDREX13')).toEqual(0.0)
      expect(hdr1.get('AMDREX14')).toEqual(0.0)
      expect(hdr1.get('AMDREX15')).toEqual(0.0)
      expect(hdr1.get('AMDREX16')).toEqual(0.0)
      expect(hdr1.get('AMDREX17')).toEqual(0.0)
      expect(hdr1.get('AMDREX18')).toEqual(0.0)
      expect(hdr1.get('AMDREX19')).toEqual(0.0)
      expect(hdr1.get('AMDREX20')).toEqual(0.0)
      expect(hdr1.get('AMDREY1')).toEqual(67.125958024)
      expect(hdr1.get('AMDREY2')).toEqual(0.144493150279)
      expect(hdr1.get('AMDREY3')).toEqual(313.640078445)
      expect(hdr1.get('AMDREY4')).toEqual(-1.76527567573e-06)
      expect(hdr1.get('AMDREY5')).toEqual(-5.14662446757e-07)
      expect(hdr1.get('AMDREY6')).toEqual(8.61709943707e-06)
      expect(hdr1.get('AMDREY7')).toEqual(0.0)
      expect(hdr1.get('AMDREY8')).toEqual(0.0)
      expect(hdr1.get('AMDREY9')).toEqual(0.0)
      expect(hdr1.get('AMDREY10')).toEqual(0.0)
      expect(hdr1.get('AMDREY11')).toEqual(0.0)
      expect(hdr1.get('AMDREY12')).toEqual(0.0)
      expect(hdr1.get('AMDREY13')).toEqual(0.0)
      expect(hdr1.get('AMDREY14')).toEqual(0.0)
      expect(hdr1.get('AMDREY15')).toEqual(0.0)
      expect(hdr1.get('AMDREY16')).toEqual(0.0)
      expect(hdr1.get('AMDREY17')).toEqual(0.0)
      expect(hdr1.get('AMDREY18')).toEqual(0.0)
      expect(hdr1.get('AMDREY19')).toEqual(0.0)
      expect(hdr1.get('AMDREY20')).toEqual(0.0)
      expect(hdr1.get('ASTRMASK')).toBe('xp.mask')
      expect(hdr1.get('WCSAXES')).toEqual(2)
      expect(hdr1.get('WCSNAME')).toBe('DSS')
      expect(hdr1.get('RADESYS')).toBe('ICRS')
      expect(hdr1.get('CTYPE1')).toBe('RA---TAN')
      expect(hdr1.get('CRPIX1')).toEqual(446.0)
      expect(hdr1.get('CRVAL1')).toEqual(210.801868)
      expect(hdr1.get('CUNIT1')).toBe('deg')
      expect(hdr1.get('CTYPE2')).toBe('DEC--TAN')
      expect(hdr1.get('CRPIX2')).toEqual(447.0)
      expect(hdr1.get('CRVAL2')).toEqual(54.348171)
      expect(hdr1.get('CUNIT2')).toBe('deg')
      expect(hdr1.get('CD1_1')).toEqual(-0.0002798094)
      expect(hdr1.get('CD1_2')).toEqual(1.56364e-05)
      expect(hdr1.get('CD2_1')).toEqual(1.55823e-05)
      expect(hdr1.get('CD2_2')).toEqual(0.0002791902)
      expect(hdr1.get('OBJECT')).toBe('data')
      expect(hdr1.get('DATAMIN')).toEqual(2396)
      expect(hdr1.get('DATAMAX')).toEqual(26203)
      expect(hdr1.get('OBJCTRA')).toBe('14 03 12.510')
      expect(hdr1.get('OBJCTDEC')).toBe('+54 20 53.10')
      expect(hdr1.get('OBJCTX')).toEqual(3053.14)
      expect(hdr1.get('OBJCTY')).toEqual(10078.26)
    
      # Testing the second header
      expect(hdr2.get('XTENSION')).toBe('TABLE')
      expect(hdr2.get('BITPIX')).toEqual(8)
      expect(hdr2.get('NAXIS')).toEqual(2)
      expect(hdr2.get('NAXIS1')).toEqual(24)
      expect(hdr2.get('NAXIS2')).toEqual(1600)
      expect(hdr2.get('PCOUNT')).toEqual(0)
      expect(hdr2.get('GCOUNT')).toEqual(1)
      expect(hdr2.get('TFIELDS')).toEqual(4)
      expect(hdr2.get('EXTNAME')).toBe('xp.mask')
      expect(hdr2.get('TTYPE1')).toBe('XI')
      expect(hdr2.get('TBCOL1')).toEqual(1)
      expect(hdr2.get('TFORM1')).toBe('F6.2')
      expect(hdr2.get('TUNIT1')).toBe('DEGREES')
      expect(hdr2.get('TTYPE2')).toBe('ETA')
      expect(hdr2.get('TBCOL2')).toEqual(7)
      expect(hdr2.get('TFORM2')).toBe('F6.2')
      expect(hdr2.get('TUNIT2')).toBe('DEGREES')
      expect(hdr2.get('TTYPE3')).toBe('XI_CORR')
      expect(hdr2.get('TBCOL3')).toEqual(13)
      expect(hdr2.get('TFORM3')).toBe('F6.2')
      expect(hdr2.get('TUNIT3')).toBe('ARCSEC')
      expect(hdr2.get('TTYPE4')).toBe('ETA_CORR')
      expect(hdr2.get('TBCOL4')).toEqual(19)
      expect(hdr2.get('TFORM4')).toBe('F6.2')
      expect(hdr2.get('TUNIT4')).toBe('ARCSEC')
    
  it 'can parse a FITS header describing an compressed image', ->
    ready = false
    
    path = 'data/CFHTLS_03_g_sci.fits.fz'
    fits = new astro.FITS(path, (fits) ->
      ready = true
    )
    
    waitsFor ->
      return ready
    
    runs ->
      hdr1 = fits.getHeader(0)
      hdr2 = fits.getHeader(1)
      
      expect(hdr2.isPrimary()).toBeFalsy()
      expect(hdr2.isExtension()).toBeTruthy()
      
      expect(hdr1.get('SIMPLE')).toBeTruthy()
      expect(hdr1.get('BITPIX')).toEqual(16)
      expect(hdr1.get('NAXIS')).toEqual(0)
      expect(hdr1.get('EXTEND')).toBeTruthy()
      expect(hdr1.get('CHECKSUM')).toBe('1dF51Z941dC41Z94')
      expect(hdr1.get('DATASUM')).toBe('0')
    
      expect(hdr2.get('XTENSION')).toBe('BINTABLE')
      expect(hdr2.get('BITPIX')).toEqual(8)
      expect(hdr2.get('NAXIS')).toEqual(2)
      expect(hdr2.get('NAXIS1')).toEqual(24)
      expect(hdr2.get('NAXIS2')).toEqual(401)
      expect(hdr2.get('PCOUNT')).toEqual(98591)
      expect(hdr2.get('GCOUNT')).toEqual(1)
      expect(hdr2.get('TFIELDS')).toEqual(3)
      expect(hdr2.get('TTYPE1')).toBe('COMPRESSED_DATA')
      expect(hdr2.get('TFORM1')).toBe('1PB(281)')
      expect(hdr2.get('TTYPE2')).toBe('ZSCALE')
      expect(hdr2.get('TFORM2')).toBe('1D')
      expect(hdr2.get('TTYPE3')).toBe('ZZERO')
      expect(hdr2.get('TFORM3')).toBe('1D')
      expect(hdr2.get('ZIMAGE')).toBeTruthy()
      expect(hdr2.get('ZTILE1')).toEqual(401)
      expect(hdr2.get('ZTILE2')).toEqual(1)
      expect(hdr2.get('ZCMPTYPE')).toBe('RICE_1')
      expect(hdr2.get('ZNAME1')).toBe('BLOCKSIZE')
      expect(hdr2.get('ZVAL1')).toEqual(32)
      expect(hdr2.get('ZNAME2')).toBe('BYTEPIX')
      expect(hdr2.get('ZVAL2')).toEqual(4)
      expect(hdr2.get('EXTNAME')).toBe('COMPRESSED_IMAGE')
      expect(hdr2.get('ZSIMPLE')).toBeTruthy()
      expect(hdr2.get('ZBITPIX')).toEqual(-32)
      expect(hdr2.get('ZNAXIS')).toEqual(2)
      expect(hdr2.get('ZNAXIS1')).toEqual(401)
      expect(hdr2.get('ZNAXIS2')).toEqual(401)
      expect(hdr2.get('ZEXTEND')).toBeTruthy()
      expect(hdr2.get('EQUINOX')).toEqual(2000.0)
      expect(hdr2.get('RADECSYS')).toBe('ICRS')
      expect(hdr2.get('CTYPE1')).toBe('RA---TAN')
      expect(hdr2.get('CUNIT1')).toBe('deg')
      expect(hdr2.get('CRVAL1')).toEqual(31.62858333)
      expect(hdr2.get('CRPIX1')).toEqual(-7482.5)
      expect(hdr2.get('CD1_1')).toEqual(-5.166666789e-05)
      expect(hdr2.get('CD1_2')).toEqual(0.0)
      expect(hdr2.get('CTYPE2')).toBe('DEC--TAN')
      expect(hdr2.get('CUNIT2')).toBe('deg')
      expect(hdr2.get('CRVAL2')).toEqual(-10.73333333)
      expect(hdr2.get('CRPIX2')).toEqual(-6213.5)
      expect(hdr2.get('CD2_1')).toEqual(0.0)
      expect(hdr2.get('CD2_2')).toEqual(5.166666789e-05)
      expect(hdr2.get('EXPTIME')).toEqual(3500.353)
      expect(hdr2.get('GAIN')).toEqual(68.81093874)
      expect(hdr2.get('SATURATE')).toEqual(3234.110669)
      expect(hdr2.get('SOFTNAME')).toBe('SWarp')
      expect(hdr2.get('SOFTVERS')).toBe('2.17.6')
      expect(hdr2.get('SOFTDATE')).toBe('2009-04-09')
      expect(hdr2.get('SOFTAUTH')).toBe('Emmanuel BERTIN <bertin@iap.fr>')
      expect(hdr2.get('SOFTINST')).toBe('IAP  http://www.iap.fr')
      expect(hdr2.get('AUTHOR')).toBe('unknown')
      expect(hdr2.get('ORIGIN')).toBe('CFHT')
      expect(hdr2.get('DATE')).toBe('2009-07-30T14:53:50')
      expect(hdr2.get('COMBINET')).toBe('MEDIAN')
      expect(hdr2.get('FILTER')).toBe('g.MP9401')
      expect(hdr2.get('INSTRUME')).toBe('MegaPrime')
      expect(hdr2.get('TELESCOP')).toBe('CFHT 3.6m')
      expect(hdr2.get('DETECTOR')).toBe('MegaCam')
      expect(hdr2.get('OBSERVER')).toBe('QSO Team')
      expect(hdr2.get('PHOT_C')).toEqual(26.537)
      expect(hdr2.get('PHOT_K')).toEqual(-0.15)
      expect(hdr2.get('OBJECT')).toBe('w1.-3-4')
      expect(hdr2.get('REL_DATE')).toBe('2008-10-19T00:00:00')
      expect(hdr2.get('RESAMPT1')).toBe('LANCZOS3')
      expect(hdr2.get('CENTERT1')).toBe('MANUAL')
      expect(hdr2.get('PSCALET1')).toBe('MANUAL')
      expect(hdr2.get('RESAMPT2')).toBe('LANCZOS3')
      expect(hdr2.get('CENTERT2')).toBe('MANUAL')
      expect(hdr2.get('PSCALET2')).toBe('MANUAL')
      expect(hdr2.get('ZQUANTIZ')).toBe('SUBTRACTIVE_DITHER_1')
      expect(hdr2.get('ZDITHER0')).toEqual(7581)
      expect(hdr2.get('CHECKSUM')).toBe('VAQOW6QOVAQOV3QO')
      expect(hdr2.get('DATASUM')).toBe('3223591956')

  it 'can parse a FITS header describing a binary table', ->
    ready = false
    
    path = 'data/spec-0406-51869-0012.fits'
    fits = new astro.FITS(path, (fits) ->
      ready = true
    )
    
    waitsFor ->
      return ready
    
    runs ->
      hdr1 = fits.getHeader(0)
      hdr2 = fits.getHeader(1)
              
      expect(hdr1.get('SIMPLE')).toBeTruthy()
      expect(hdr1.get('BITPIX')).toEqual(8)
      expect(hdr1.get('NAXIS')).toEqual(0)
      expect(hdr1.get('EXTEND')).toBeTruthy()
    
      expect(hdr2.get('XTENSION')).toBe('BINTABLE')
      expect(hdr2.get('BITPIX')).toEqual(8)
      expect(hdr2.get('NAXIS')).toEqual(2)
      expect(hdr2.get('NAXIS1')).toEqual(40)
      expect(hdr2.get('NAXIS2')).toEqual(3854)
      expect(hdr2.get('PCOUNT')).toEqual(0)
      expect(hdr2.get('GCOUNT')).toEqual(1)
      expect(hdr2.get('TFIELDS')).toEqual(6)
      expect(hdr2.get('TTYPE1')).toBe('flux')
      expect(hdr2.get('TFORM1')).toBe('D')
      expect(hdr2.get('TTYPE2')).toBe('best_fit')
      expect(hdr2.get('TFORM2')).toBe('D')
      expect(hdr2.get('TTYPE3')).toBe('wavelength')
      expect(hdr2.get('TFORM3')).toBe('D')
      expect(hdr2.get('TTYPE4')).toBe('and_mask')
      expect(hdr2.get('TFORM4')).toBe('J')
      expect(hdr2.get('TTYPE5')).toBe('or_mask')
      expect(hdr2.get('TFORM5')).toBe('J')
      expect(hdr2.get('TTYPE6')).toBe('inverse_variance')
      expect(hdr2.get('TFORM6')).toBe('D')
      expect(hdr2.get('TAI')).toBe('4481503965.49')
      expect(hdr2.get('RA')).toBe('35.883123')
      expect(hdr2.get('DEC')).toBe('0.122066')
      expect(hdr2.get('EQUINOX')).toBe('2000.0')
      expect(hdr2.get('RADECSYS')).toBe('FK5')
      expect(hdr2.get('AZ')).toBe('280.031654167')
      expect(hdr2.get('ALT')).toBe('54.1588238333')
      expect(hdr2.get('AIRMASS')).toBe('1.20323')
      expect(hdr2.get('FOCUS')).toBe('-1000000000000')
      expect(hdr2.get('DATE-OBS')).toBe('2000-11-21')
      expect(hdr2.get('TAIHMS')).toBe('05:11:42.21')
      expect(hdr2.get('TIMESYS')).toBe('tai')
      expect(hdr2.get('TAI-BEG')).toBe('4481499044.0')
      expect(hdr2.get('TAI-END')).toBe('4481508024.0')
      expect(hdr2.get('MJD')).toBe('51869')
      expect(hdr2.get('MJDLIST')).toBe('51869')
